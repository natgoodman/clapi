.ess_funargs("nvq")
.ess_funargs("nvq")
.ess_funargs("nvq")
.ess_funargs("nvq")
.ess_funargs("nvq")
rm
getwd()
.ess_funargs("c")
.ess_funargs("c")
.ess_funargs("c")
.ess_funargs("c")
.ess_funargs("c")
.ess_funargs("c")
.ess_funargs("c")
.ess_funargs("c")
.ess_funargs("c")
.ess_funargs("c")
.ess_funargs("c")
save.image()
getwd()
.ess_funargs("paste")
.ess_funargs("paste")
nv=function(names,SEP=' ',IGNORE=F) {
  env=parent.frame(n=1);
  values=sapply(names,function(name) {
    if (exists(name,envir=env)) get(name,envir=env)
    else if (!IGNORE) stop(paste('no value for',name,'in parent environment'));
  });
  ## values=sapply(names,function(name)
  ##   if (exists(name,envir=parent.frame(n=2))) get(name,envir=parent.frame(n=2))
  ##   else stop(paste('no value for',name,'in parent environment')));
  paste(collapse=SEP,unlist(mapply(function(name,value)
    if (!is.null(value)|!IGNORE) paste(sep='=',name,value) else NULL,names,values)));
}
getwd()
.ess_funargs("nv")
.ess_funargs("nv")
.ess_funargs("nv")
.ess_funargs("nv")
.ess_funargs("nv")
.ess_funargs("cq")
.ess_funargs("cq")
.ess_funargs("cq")
.ess_funargs("cq")
.ess_funargs("cq")
.ess_funargs("cq")
.ess_funargs("nv")
nv(cq(g1,g2))
      legend.vars=names(count)[count>1];
legend.vars
getwd()
with(cases,paste(legend.labels,nv(list=legend.vars,SEP=', ')))
legend.labels=NULL
with(cases,paste(legend.labels,nv(list=legend.vars,SEP=', ')))
getwd()
.ess_funargs("nv")
.ess_funargs("nv")
.ess_funargs("nv")
.ess_funargs("nv")
.ess_funargs("nv")
.ess_funargs("nv")
.ess_funargs("nv")
.ess_funargs("nv")
.ess_funargs("nv")
.ess_funargs("nv")
.ess_funargs("nv")
.ess_funargs("with")
.ess_funargs("with")
.ess_funargs("nv")
.ess_funargs("nv")
.ess_funargs("nv")
.ess_funargs("nv")
.ess_funargs("nv")
with(cases,paste(legend.labels,nv(names=legend.vars,SEP=', ')))
getwd()
.ess_funargs("with")
.ess_funargs("with")
.ess_funargs("withrows")
.ess_funargs("withrows")
.ess_funargs("withrows")
.ess_funargs("withrows")
withrows(cases,case,paste(legend.labels,nv(names=legend.vars,SEP=', ')))
.ess_funargs("unlist")
.ess_funargs("unlist")
unlist(withrows(cases,case,paste(legend.labels,nv(names=legend.vars,SEP=', '))))
.ess_funargs("paste")
.ess_funargs("paste")
unlist(withrows(cases,case,paste('',nv(names=legend.vars,SEP=', '))))
.ess_funargs("paste")
.ess_funargs("paste")
.ess_funargs("paste")
.ess_funargs("paste")
.ess_funargs("paste")
.ess_funargs("paste")
.ess_funargs("paste")
.ess_funargs("paste")
.ess_funargs("paste")
.ess_funargs("paste")
.ess_funargs("paste")
.ess_funargs("paste")
unlist(withrows(cases,case,paste(collapse=' ',legend.labels,nv(names=legend.vars,SEP=', '))))
.ess_funargs("paste")
.ess_funargs("paste")
.ess_funargs("c")
.ess_funargs("unlist")
unlist(withrows(cases,case,paste(collapse=' ',c(legend.labels,nv(names=legend.vars,SEP=', ')))))
.ess_funargs("nv")
.ess_funargs("nv")
.ess_funargs("nv")
.ess_funargs("cq")
.ess_funargs("cq")
.ess_funargs("cq")
.ess_funargs("cq")
.ess_funargs("cq")
.ess_funargs("cq")
.ess_funargs("cq")
.ess_funargs("cq")
.ess_funargs("nv")
unlist(withrows(cases,case,paste(collapse=' ',c(legend.labels,nv(names=cq(g1,g2,n),SEP=', ')))))
.ess_funargs("c")
.ess_funargs("c")
unlist(withrows(cases,case,paste(collapse=' ',c('foo',nv(names=cq(g1,g2,n),SEP=', ')))))
getwd()
.ess_funargs("withrows")
.ess_funargs("withrows")
.ess_funargs("withrows")
.ess_funargs("withrows")
 legend.labels=unlist(
        withrows(cases,case,paste(collapse=' ',c(legend.labels,nv(names=legend.vars,SEP=', ')))));
legend.labels
getwd()
FALSE=='auto'
getwd()
.ess_funargs("unlist")
.ess_funargs("nil")
.ess_funargs("matplot")
.ess_funargs("matplot")
.ess_funargs("matplot")
.ess_funargs("matplot")
.ess_funargs("matplot")
.ess_funargs("matplot")
.ess_funargs("vhline")
.ess_funargs("vhline")
.ess_funargs("list")
.ess_funargs("list")
.ess_funargs("list")
.ess_funargs("list")
.ess_funargs("list")
.ess_funargs("list")
.ess_funargs("list")
.ess_funargs("list")
.ess_funargs("list")
.ess_funargs("list")
.ess_funargs("list")
.ess_funargs("list")
.ess_funargs("list")
.ess_funargs("list")
.ess_funargs("list")
.ess_funargs("list")
.ess_funargs("list")
.ess_funargs("list")
.ess_funargs("list")
.ess_funargs("list")
.ess_funargs("list")
.ess_funargs("list")
.ess_funargs("list")
.ess_funargs("list")
.ess_funargs("list")
.ess_funargs("list")
.ess_funargs("list")
.ess_funargs("list")
.ess_funargs("list")
.ess_funargs("list")
.ess_funargs("list")
.ess_funargs("list")
.ess_funargs("list")
.ess_funargs("list")
.ess_funargs("list")
.ess_funargs("list")
.ess_funargs("list")
.ess_funargs("list")
.ess_funargs("list")
.ess_funargs("list")
.ess_funargs("list")
.ess_funargs("list")
.ess_funargs("list")
.ess_funargs("list")
.ess_funargs("list")
.ess_funargs("list")
.ess_funargs("list")
.ess_funargs("list")
.ess_funargs("list")
.ess_funargs("list")
.ess_funargs("list")
.ess_funargs("list")
.ess_funargs("list")
.ess_funargs("list")
.ess_funargs("list")
.ess_funargs("list")
.ess_funargs("list")
.ess_funargs("list")
.ess_funargs("list")
.ess_funargs("list")
.ess_funargs("list")
.ess_funargs("list")
.ess_funargs("list")
.ess_funargs("list")
.ess_funargs("list")
.ess_funargs("list")
.ess_funargs("list")
.ess_funargs("list")
.ess_funargs("list")
.ess_funargs("list")
.ess_funargs("list")
.ess_funargs("list")
.ess_funargs("list")
.ess_funargs("list")
.ess_funargs("list")
.ess_funargs("list")
.ess_funargs("list")
.ess_funargs("list")
.ess_funargs("list")
.ess_funargs("list")
.ess_funargs("list")
.ess_funargs("list")
.ess_funargs("list")
.ess_funargs("list")
.ess_funargs("list")
.ess_funargs("list")
.ess_funargs("list")
.ess_funargs("list")
.ess_funargs("list")
.ess_funargs("list")
.ess_funargs("list")
.ess_funargs("list")
.ess_funargs("list")
.ess_funargs("list")
.ess_funargs("list")
.ess_funargs("legend")
.ess_funargs("legend")
.ess_funargs("legend")
.ess_funargs("legend")
.ess_funargs("legend")
.ess_funargs("legend")
.ess_funargs("legend")
.ess_funargs("legend")
.ess_funargs("legend")
.ess_funargs("legend")
.ess_funargs("legend")
.ess_funargs("legend")
.ess_funargs("legend")
.ess_funargs("legend")
.ess_funargs("legend")
.ess_funargs("legend")
.ess_funargs("legend")
.ess_funargs("legend")
.ess_funargs("legend")
.ess_funargs("legend")
.ess_funargs("legend")
.ess_funargs("legend")
.ess_funargs("legend")
.ess_funargs("legend")
.ess_funargs("legend")
.ess_funargs("list")
.ess_funargs("legend")
.ess_funargs("source")
.ess_funargs("source")
source('R/plot_nudge.R')
getwd()
.ess_funargs("nil")
.ess_funargs("nil")
.ess_funargs("nil")
source('R/plot_nudge.R')
getwd()
.ess_funargs("nil")
.ess_funargs("nil")
.ess_funargs("nil")
.ess_funargs("nil")
.ess_funargs("nil")
.ess_funargs("nil")
.ess_funargs("nil")
.ess_funargs("nil")
source('R/plot_nudge.R')
g1
cases
.ess_funargs("plot_distr")
.ess_funargs("plot_distr")
.ess_funargs("plot_distr")
.ess_funargs("plot_distr")
.ess_funargs("plot_distr")
.ess_funargs("plot_distr")
.ess_funargs("plot_distr")
.ess_funargs("plot_distr")
.ess_funargs("plot_distr")
.ess_funargs("plot_distr")
.ess_funargs("plot_distr")
.ess_funargs("plot_distr")
.ess_funargs("plot_distr")
.ess_funargs("plot_distr")
.ess_funargs("plot_distr")
.ess_funargs("c")
.ess_funargs("c")
.ess_funargs("c")
.ess_funargs("c")
.ess_funargs("c")
.ess_funargs("c")
.ess_funargs("c")
.ess_funargs("c")
.ess_funargs("c")
.ess_funargs("plot_distr")
getwd()
plot_distr(g1=85,g2=15,n=c(20,50,80))
getwd()
source('R/plot_util.R')
.ess_funargs("nil")
.ess_funargs("nil")
.ess_funargs("nil")
.ess_funargs("nil")
plot_distr(g1=85,g2=15,n=c(20,50,80))
getwd()
.ess_funargs("q")
.ess_funargs("q")
q('yes')
dev.new(); source('R/source.R'); with(nudge[5,],plot_distr(g1=n.treated,g2=n.control,n=cvr.all))
legends
legend.args
.ess_funargs("nil")
getwd()
is.null(legend.args)
c
legend.args
getwd()
        legend.args=fill_defaults(default.args,c(list(x=x,y=y),legend.args));
legend.args
getwd()
do.call(legend_,legend.args)
c
getwd()
devs.close()
.ess_funargs("rownames")
.ess_funargs("rownames")
.ess_funargs("rownames")
.ess_funargs("rownames")
.ess_funargs("rownames")
.ess_funargs("rownames")
.ess_funargs("rownames")
.ess_funargs("rownames")
.ess_funargs("rownames")
.ess_funargs("rownames")
rownames(nudge[,5])
.ess_funargs("rownames")
.ess_funargs("rownames")
.ess_funargs("rownames")
.ess_funargs("rownames")
.ess_funargs("rownames")
rownames(nudge)
.ess_funargs("rownames")
.ess_funargs("rownames")
.ess_funargs("rownames")
.ess_funargs("rownames")
rownames(nudge[5,])
getwd()
.ess_funargs("nil")
.ess_funargs("nil")
.ess_funargs("nil")
.ess_funargs("nil")
.ess_funargs("nil")
.ess_funargs("nil")
.ess_funargs("nil")
.ess_funargs("nil")
.ess_funargs("length")
.ess_funargs("length")
.ess_funargs("length")
.ess_funargs("length")
.ess_funargs("length")
.ess_funargs("length")
.ess_funargs("length")
.ess_funargs("length")
.ess_funargs("nil")
.ess_funargs("nil")
.ess_funargs("nil")
.ess_funargs("nil")
.ess_funargs("paste0")
.ess_funargs("paste0")
.ess_funargs("paste0")
.ess_funargs("length")
.ess_funargs("paste0")
.ess_funargs("paste0")
.ess_funargs("paste0")
.ess_funargs("paste0")
.ess_funargs("paste0")
.ess_funargs("paste0")
.ess_funargs("paste0")
.ess_funargs("nil")
.ess_funargs("nil")
.ess_funargs("nil")
.ess_funargs("nil")
.ess_funargs("unlist")
.ess_funargs("withrows")
dev.new(); source('R/source.R'); with(nudge[5,],plot_distr(g1=n.treated,g2=n.control,n=cvr.all))
c
c
getwd()
.ess_funargs("plot_distr")
.ess_funargs("plot_distr")
.ess_funargs("plot_distr")
.ess_funargs("plot_distr")
.ess_funargs("plot_distr")
.ess_funargs("plot_distr")
.ess_funargs("plot_distr")
.ess_funargs("plot_distr")
.ess_funargs("plot_distr")
.ess_funargs("plot_distr")
.ess_funargs("plot_distr")
.ess_funargs("plot_distr")
.ess_funargs("plot_distr")
.ess_funargs("plot_distr")
.ess_funargs("plot_distr")
dev.new(); source('R/source.R'); with(nudge[5,],plot_distr(g1=n.treated,g2=n.control,n=cvr.all,casenames='m11'))
getwd()
.ess_funargs("plot_distr")
dev.new(); source('R/source.R'); with(nudge[5,],plot_distr(g1=n.treated,g2=n.control,n=cvr.all,casenames='m11'))
getwd()
.ess_funargs("q")
.ess_funargs("BREAKPOINT")
source('R/source.R'); with(nudge[5,],plot_distr(g1=n.treated,g2=n.control,n=cvr.all,casenames='m11'))
getwd()
.ess_funargs("with")
.ess_funargs("with")
.ess_funargs("with")
.ess_funargs("with")
source('R/source.R'); with(nudge[5,],plotm_distr(g1=n.treated,g2=n.control,n=cvr.all,casenames='m11'))
getwd()
Q
.ess_funargs("with")
.ess_funargs("with")
source('R/source.R'); with(nudge[5,],plotm_distr(g1=n.treated,g2=n.control,n=cvr.all,casenames='m11'))
title
Q
getwd()
.ess_funargs("q")
.ess_funargs("q")
q('yes')
.ess_funargs("library")
.ess_funargs("library")
library(RColorBrewer)
source('R/source.R'); plotq_distr(g1=c(8500,8000),g2=c(1500,2000),n=2000)
.ess_funargs("plotq_nudge")
.ess_funargs("plotq_nudge")
.ess_funargs("plotq_nudge")
.ess_funargs("plotq_nudge")
.ess_funargs("plotq_nudge")
.ess_funargs("plotq_nudge")
.ess_funargs("plotq_nudge")
.ess_funargs("plotq_nudge")
.ess_funargs("plotq_nudge")
plotq_nudge(nudge[1,])
getwd()
.ess_funargs("sapply")
.ess_funargs("load_data")
.ess_funargs("sapply")
.ess_funargs("dofig")
.ess_funargs("dofig")
.ess_funargs("dofig")
.ess_funargs("doc_nudge")
.ess_funargs("doc_nudge")
source('R/source.R'); doc_nudge('plotq')
.ess_funargs("init_doc")
init_doc()
source('R/source.R');
doc_nudge('plotq')
.ess_funargs("param")
.ess_funargs("param")
.ess_funargs("param")
.ess_funargs("param")
.ess_funargs("param")
.ess_funargs("param")
.ess_funargs("param")
.ess_funargs("param")
param(figscreen)
getwd()
.ess_funargs("doc_nudge")
doc_nudge('plotm')
.ess_funargs("doc_nudge")
doc_nudge('plotq')
.ess_funargs("doc_nudge")
.ess_funargs("doc_nudge")
.ess_funargs("doc_nudge")
.ess_funargs("seq")
.ess_funargs("seq")
.ess_funargs("seq")
.ess_funargs("seq")
.ess_funargs("seq")
.ess_funargs("seq")
.ess_funargs("seq")
.ess_funargs("seq")
.ess_funargs("seq")
.ess_funargs("seq")
.ess_funargs("seq")
.ess_funargs("seq")
.ess_funargs("seq")
.ess_funargs("seq")
.ess_funargs("doc_nudge")
doc_nudge('plotq',q=seq(0.01,0.99,by=0.01))
.ess_funargs("doc_nudge")
getwd()
.ess_funargs("c")
source('R/source.R'); plotq_distr(g1=c(8500,8000),g2=c(1500,2000),n=2000)
dev.new()
plotq_distr(g1=c(8500,8000),g2=c(1500,2000),n=2000)
doc_nudge('plotq')
q('yes')
